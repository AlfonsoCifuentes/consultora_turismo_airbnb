import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import sqlite3
from pathlib import Path
import numpy as np

# Imports opcionales para folium (para evitar errores en deploy)
try:
    import folium
    from streamlit_folium import st_folium
    FOLIUM_AVAILABLE = True
except ImportError:
    FOLIUM_AVAILABLE = False
    st.warning("‚ö†Ô∏è Folium no disponible - los mapas interactivos estar√°n deshabilitados")

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Dashboard Regulatorio Turismo Urbano",
    page_icon="üèõÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personalizado para tema oscuro
st.markdown("""
<style>
    /* Tema oscuro personalizado */
    .stApp {
        background-color: #0e1117;
        color: #fafafa;
    }
    
    .main-header {
        font-size: 3rem;
        color: #00d4ff;
        text-align: center;
        margin-bottom: 2rem;
        text-shadow: 0 0 10px rgba(0, 212, 255, 0.3);
    }
    
    .metric-card {
        background-color: #1e1e1e;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid #00d4ff;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
    }
    
    .alert-critical {
        background: linear-gradient(135deg, #ff4444, #cc0000);
        color: white;
        padding: 1rem;
        border-radius: 0.5rem;
        text-align: center;
        box-shadow: 0 4px 8px rgba(255, 68, 68, 0.3);
    }
    
    .alert-warning {
        background: linear-gradient(135deg, #ff8c00, #ff6600);
        color: white;
        padding: 1rem;
        border-radius: 0.5rem;
        text-align: center;
        box-shadow: 0 4px 8px rgba(255, 140, 0, 0.3);
    }
    
    .alert-success {
        background: linear-gradient(135deg, #28a745, #20a039);
        color: white;
        padding: 1rem;
        border-radius: 0.5rem;
        text-align: center;
        box-shadow: 0 4px 8px rgba(40, 167, 69, 0.3);
    }
    
    /* Mejorar contraste en el sidebar */
    .css-1d391kg {
        background-color: #1e1e1e;
    }
    /* Sidebar oscuro completo */
    [data-testid="stSidebar"] > div {
        background-color: #1e1e1e !important;
    }
    /* Texto e √≠tems de la sidebar en claro */
    [data-testid="stSidebar"] * {
        color: #fafafa !important;
    }
    
    /* Estilo para m√©tricas */
    div[data-testid="metric-container"] {
        background-color: #1e1e1e;
        border: 1px solid #333;
        padding: 1rem;
        border-radius: 0.5rem;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
    }
    
    /* Estilo para tabs */
    .stTabs [data-baseweb="tab-list"] {
        background-color: #1e1e1e;
    }
    
    .stTabs [data-baseweb="tab"] {
        background-color: #2d2d2d;
        color: #fafafa;    }
    
    .stTabs [aria-selected="true"] {
        background: linear-gradient(135deg, #00d4ff, #0099cc);
        color: #000;
        font-weight: bold;
    }
    
    /* Selectbox y controles */
    .stSelectbox > div > div {
        background-color: #2d2d2d;
        color: #fafafa;
        border: 1px solid #444;
    }
    
    /* Sliders */
    .stSlider > div > div > div {
        background-color: #00d4ff;
    }
    
    /* DataFrames */
    .stDataFrame {
        background-color: #1e1e1e;
        border-radius: 10px;
        border: 1px solid #444;
    }
    
    /* Expanders */
    .streamlit-expanderHeader {
        background-color: #2d2d2d;
        color: #00d4ff;
        border-radius: 8px;
        border: 1px solid #444;
    }
    
    /* Checkboxes */
    .stCheckbox > label {
        color: #fafafa;
    }
    
    /* Info, warning, error boxes */
    .stAlert {
        background-color: #2d2d2d;
        border-radius: 10px;
        border: 1px solid #444;
        color: #fafafa;
    }
    
    /* Botones */
    .stButton > button {
        background: linear-gradient(135deg, #00d4ff, #0099cc);
        color: #000;
        border: none;
        border-radius: 10px;
        padding: 0.75rem 2rem;
        font-weight: bold;
        box-shadow: 0 4px 15px rgba(0, 212, 255, 0.3);
    }
    
    .stButton > button:hover {
        background: linear-gradient(135deg, #00b8e6, #007aa3);
        transform: translateY(-2px);
    }
    
    /* Mejorar legibilidad del texto */
    .stMarkdown {
        color: #fafafa;
    }
    
    h1, h2, h3, h4, h5, h6 {
        color: #00d4ff;
        text-shadow: 0 0 10px rgba(0, 212, 255, 0.3);
    }
    
    /* Footer styling */
    .footer-style {
        background: linear-gradient(135deg, #1e1e1e, #2d2d2d);
        padding: 2rem;
        border-radius: 15px;
        margin-top: 2rem;
        border: 1px solid #00d4ff;
        text-align: center;
        color: #fafafa;
        box-shadow: 0 8px 25px rgba(0, 212, 255, 0.2);
    }

    /* Dark sidebar override */
    [data-testid="stSidebar"] > div:first-child {
        background-color: #1e1e1e !important;
        color: #fafafa !important;
    }
</style>
""", unsafe_allow_html=True)

@st.cache_data
def cargar_datos():
    """Carga todos los datos procesados desde la base de datos"""
    try:
        # Ruta de la base del proyecto y archivo de base de datos
        base_dir = Path(__file__).resolve().parent.parent
        db_path = base_dir / "data" / "processed" / "airbnb_consultores_turismo.db"
         
        if not db_path.exists():
            st.error(f"‚ùå Base de datos no encontrada en: {db_path}")
            st.info("üí° Aseg√∫rate de que el archivo 'airbnb_consultores_turismo.db' est√© en la carpeta data/processed/")
            return None, None, None, None
        
        conn = sqlite3.connect(str(db_path))
        
        # Cargar datasets principales
        df_listings = pd.read_sql_query("SELECT * FROM listings_unificado", conn)
        df_kpis_ciudad = pd.read_sql_query("SELECT * FROM kpis_por_ciudad", conn)
        df_kpis_barrio = pd.read_sql_query("SELECT * FROM kpis_por_barrio", conn)
        df_kpis_impacto = pd.read_sql_query("SELECT * FROM kpis_impacto_urbano", conn)
        
        conn.close()
        
        return df_listings, df_kpis_ciudad, df_kpis_barrio, df_kpis_impacto
        
    except Exception as e:
        st.error(f"‚ùå Error al cargar datos: {e}")
        return None, None, None, None

@st.cache_data
def cargar_datos_economicos():
    """Carga datos econ√≥micos externos"""
    try:
        data_path = Path(__file__).parent.parent / "data" / "processed"
        
        # Datos econ√≥micos consolidados
        econ_path = data_path / "datos_economicos_turismo.csv"
        if econ_path.exists():
            df_economicos = pd.read_csv(econ_path)
            return df_economicos
        else:
            return pd.DataFrame()
    except Exception as e:
        st.warning(f"‚ö†Ô∏è No se pudieron cargar datos econ√≥micos: {e}")
        return pd.DataFrame()

def calcular_metricas_principales(df_kpis_ciudad, df_kpis_barrio, df_listings):
    """Calcula las m√©tricas principales para el dashboard"""
    
    # Validar que los DataFrames no est√©n vac√≠os
    if df_kpis_ciudad.empty:
        return {
            'total_listings': 0,
            'barrios_criticos': 0,
            'ratio_promedio': 0,
            'precio_medio': 0
        }
    
    total_listings = df_kpis_ciudad['total_listings'].fillna(0).sum()
    
    # Barrios cr√≠ticos (m√°s del 70% de viviendas convertidas)
    if 'ratio_entire_home_pct' in df_kpis_barrio.columns and not df_kpis_barrio.empty:
        barrios_criticos = len(df_kpis_barrio[df_kpis_barrio['ratio_entire_home_pct'].fillna(0) > 70])
    else:
        barrios_criticos = 0
    
    # Ratio promedio tur√≠stico/residencial
    if 'ratio_entire_home_pct' in df_kpis_ciudad.columns:
        ratio_promedio = df_kpis_ciudad['ratio_entire_home_pct'].fillna(0).mean()
    else:
        ratio_promedio = 0
    
    # Precio medio ponderado
    if 'precio_medio_euros' in df_kpis_ciudad.columns and 'total_listings' in df_kpis_ciudad.columns:
        # Filtrar filas con valores v√°lidos
        df_valid = df_kpis_ciudad.dropna(subset=['precio_medio_euros', 'total_listings'])
        if not df_valid.empty and df_valid['total_listings'].sum() > 0:
            precio_medio = (df_valid['precio_medio_euros'] * df_valid['total_listings']).sum() / df_valid['total_listings'].sum()
        else:
            precio_medio = 0
    else:
        precio_medio = 0    # Si sigue en 0, intentar promedio simple de precios desde df_listings
    if precio_medio == 0 and not df_listings.empty:
        try:
            # Buscar columnas que puedan contener precios
            precio_cols = [col for col in df_listings.columns if 'price' in col.lower()]
            
            if precio_cols:
                for col in precio_cols:
                    if col in df_listings.columns:
                        # Intentar limpiar y convertir precios
                        precios_clean = df_listings[col].astype(str).str.replace(r'[‚Ç¨$,\s]', '', regex=True)
                        precios_clean = pd.to_numeric(precios_clean, errors='coerce')
                        precios_clean = precios_clean.dropna()
                        
                        if len(precios_clean) > 0:
                            precio_medio = precios_clean.mean()
                            break
        except Exception as e:
            # En caso de error, usar valor por defecto sin mostrar error
            pass
    
    # Si todav√≠a es 0, usar valor por defecto
    if precio_medio == 0:
        precio_medio = 85  # Precio promedio estimado para Espa√±a
    
    return {
        'total_listings': total_listings,
        'barrios_criticos': barrios_criticos,
        'ratio_promedio': ratio_promedio,
        'precio_medio': precio_medio
    }

def crear_mapa_saturacion(df_kpis_barrio, ciudad_seleccionada):
    """Crea mapa de saturaci√≥n por barrios"""
    
    # Filtrar por ciudad si est√° disponible
    if 'ciudad' in df_kpis_barrio.columns:
        df_ciudad = df_kpis_barrio[df_kpis_barrio['ciudad'] == ciudad_seleccionada.lower()]
    else:
        df_ciudad = df_kpis_barrio
    
    if len(df_ciudad) == 0:
        st.warning(f"No hay datos disponibles para {ciudad_seleccionada}")
        return None
    
    # Crear mapa de saturaci√≥n usando plotly
    fig = px.bar(
        df_ciudad.head(15),
        x='barrio',
        y='ratio_entire_home_pct' if 'ratio_entire_home_pct' in df_ciudad.columns else 'total_listings',
        title=f"üèòÔ∏è Saturaci√≥n por Barrio - {ciudad_seleccionada}",
        color='ratio_entire_home_pct' if 'ratio_entire_home_pct' in df_ciudad.columns else 'total_listings',
        color_continuous_scale='Reds'
    )
    
    fig.update_layout(
        xaxis_tickangle=-45,
        height=500,
        showlegend=False
    )
    
    return fig

def crear_mapa_densidad(df_kpis_barrio, ciudad_seleccionada):
    """Crea mapa de densidad de listings"""
    
    if 'ciudad' in df_kpis_barrio.columns:
        df_ciudad = df_kpis_barrio[df_kpis_barrio['ciudad'] == ciudad_seleccionada.lower()]
    else:
        df_ciudad = df_kpis_barrio
    
    if len(df_ciudad) == 0:
        return None
    
    # Top 15 barrios por densidad
    df_top = df_ciudad.nlargest(15, 'total_listings')
    
    fig = px.scatter(
        df_top,
        x='total_listings',
        y='precio_medio_euros' if 'precio_medio_euros' in df_top.columns else 'total_listings',
        size='capacidad_total' if 'capacidad_total' in df_top.columns else 'total_listings',
        color='ratio_entire_home_pct' if 'ratio_entire_home_pct' in df_top.columns else 'total_listings',
        hover_name='barrio',
        title=f"üìä Densidad vs Precio - {ciudad_seleccionada}",
        labels={
            'total_listings': 'Total Listings',
            'precio_medio_euros': 'Precio Medio (‚Ç¨)',
            'ratio_entire_home_pct': 'Ratio Entire Home (%)'
        }
    )
    
    fig.update_layout(height=500)
    return fig

def crear_mapa_coropletico(df_kpis_barrio, ciudad_seleccionada):
    """Crea mapa coropl√©tico con datos geoespaciales"""
    import json
    import plotly.express as px
    
    try:
        # Preparar ruta al directorio de datos procesados y archivo GeoJSON
        base_dir = Path(__file__).resolve().parent.parent
        data_path = base_dir / "data" / "processed"
        geojson_file = f"neighbourhoods_{ciudad_seleccionada.lower()}.geojson"
        geojson_path = data_path / geojson_file
        
        if not geojson_path.exists():
            st.warning(f"‚ö†Ô∏è Archivo GeoJSON no encontrado: {geojson_file}")
            return None
        
        # Cargar GeoJSON
        with open(geojson_path, 'r', encoding='utf-8') as f:
            geojson_data = json.load(f)
        
        # Filtrar datos por ciudad
        if 'ciudad' in df_kpis_barrio.columns:
            df_ciudad = df_kpis_barrio[df_kpis_barrio['ciudad'] == ciudad_seleccionada.lower()]
        else:
            df_ciudad = df_kpis_barrio
        
        if len(df_ciudad) == 0:
            st.warning(f"‚ö†Ô∏è No hay datos para la ciudad: {ciudad_seleccionada}")
            return None
        
        # Crear una copia para no modificar el original
        df_viz = df_ciudad.copy()
        
        # Normalizar nombres de barrios para hacer el match
        # Convertir a min√∫sculas y limpiar espacios
        df_viz['barrio_norm'] = df_viz['barrio'].str.lower().str.strip()
        
        # Normalizar el GeoJSON a√±adiendo propiedades normalizadas
        for feature in geojson_data['features']:
            if 'neighbourhood' in feature['properties']:
                original_name = feature['properties']['neighbourhood']
                normalized_name = original_name.lower().strip()
                feature['properties']['neighbourhood_norm'] = normalized_name
        
        # Recopilar nombres para el matching
        geojson_barrios = [f['properties']['neighbourhood_norm'] for f in geojson_data['features'] if 'neighbourhood_norm' in f['properties']]
        
        # Verificar matches
        matches = df_viz['barrio_norm'].isin(geojson_barrios)
        
        if matches.sum() == 0:
            st.warning("‚ö†Ô∏è No hay coincidencias entre los datos y el GeoJSON")
            st.write("**Barrios en datos:**", df_viz['barrio_norm'].tolist()[:10])
            st.write("**Barrios en GeoJSON:**", geojson_barrios[:10])
            return None
          # Filtrar solo los barrios que tienen match
        df_viz_filtered = df_viz[df_viz['barrio_norm'].isin(geojson_barrios)].copy()
        
        # Usar la m√©trica correcta
        color_col = 'ratio_entire_home_pct' if 'ratio_entire_home_pct' in df_viz_filtered.columns else 'total_listings'
        
        # Crear el mapa coropl√©tico
        fig = px.choropleth_mapbox(
            df_viz_filtered,
            geojson=geojson_data,
            locations='barrio_norm',
            featureidkey="properties.neighbourhood_norm",
            color=color_col,
            hover_name='barrio',
            hover_data={
                'total_listings': ':,.0f',
                'precio_medio_euros': ':,.0f' if 'precio_medio_euros' in df_viz_filtered.columns else False,
                'ratio_entire_home_pct': ':.1f%' if 'ratio_entire_home_pct' in df_viz_filtered.columns else False,
                'barrio_norm': False
            },
            color_continuous_scale='Viridis',
            mapbox_style="carto-darkmatter",
            zoom=10,
            center={"lat": 40.4168 if ciudad_seleccionada == "Madrid" else 
                          41.3851 if ciudad_seleccionada == "Barcelona" else 39.5696,
                    "lon": -3.7038 if ciudad_seleccionada == "Madrid" else 
                          2.1734 if ciudad_seleccionada == "Barcelona" else 2.6502},
            opacity=0.8,
            title=f"üó∫Ô∏è Saturaci√≥n Airbnb por Barrio - {ciudad_seleccionada}",
            labels={
                'ratio_entire_home_pct': 'Ratio Entire Home (%)',
                'total_listings': 'Total Listings',
                'precio_medio_euros': 'Precio Medio (‚Ç¨)'
            }
        )
        
        # Personalizar el layout para tema oscuro
        fig.update_layout(
            height=600,
            showlegend=True,
            margin=dict(l=0, r=0, t=50, b=0),
            paper_bgcolor='rgba(0,0,0,0)',
            plot_bgcolor='rgba(0,0,0,0)',
            font=dict(color='white'),
            title=dict(
                font=dict(size=16, color='white'),
                x=0.5,
                xanchor='center'
            )
        )
        
        return fig
        
    except Exception as e:
        st.error(f"‚ùå Error al crear mapa coropl√©tico: {str(e)}")
        import traceback
        st.error(f"Detalles del error: {traceback.format_exc()}")
        return None

def mostrar_alertas_saturacion(df_kpis_barrio):
    """Muestra sistema de alertas por saturaci√≥n"""
    
    st.markdown("## üö® Sistema de Alertas Autom√°ticas")
    
    if 'ratio_entire_home_pct' not in df_kpis_barrio.columns:
        st.warning("‚ö†Ô∏è Datos de ratio no disponibles para alertas")
        return
    
    # Clasificar barrios por nivel de alerta
    df_alertas = df_kpis_barrio.copy()
    
    def clasificar_alerta(ratio):
        if ratio > 80:
            return "üî¥ CR√çTICO"
        elif ratio > 60:
            return "üü† ALTO"
        elif ratio > 40:
            return "üü° MODERADO"
        else:
            return "üü¢ SOSTENIBLE"
    
    df_alertas['nivel_alerta'] = df_alertas['ratio_entire_home_pct'].apply(clasificar_alerta)
    
    # Contar alertas por nivel
    alertas_count = df_alertas['nivel_alerta'].value_counts()
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        criticos = alertas_count.get('üî¥ CR√çTICO', 0)
        st.markdown(f"""
        <div class="alert-critical">
        <h3>üî¥ CR√çTICOS</h3>
        <h2>{criticos}</h2>
        <p>Intervenci√≥n inmediata</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        altos = alertas_count.get('üü† ALTO', 0)
        st.markdown(f"""
        <div class="alert-warning">
        <h3>üü† ALTOS</h3>
        <h2>{altos}</h2>
        <p>Regulaci√≥n preventiva</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        moderados = alertas_count.get('üü° MODERADO', 0)
        st.markdown(f"""
        <div class="alert-warning">
        <h3>üü° MODERADOS</h3>
        <h2>{moderados}</h2>
        <p>Monitoreo intensivo</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col4:
        sostenibles = alertas_count.get('üü¢ SOSTENIBLE', 0)
        st.markdown(f"""
        <div class="alert-success">
        <h3>üü¢ SOSTENIBLES</h3>
        <h2>{sostenibles}</h2>
        <p>Mantener observaci√≥n</p>
        </div>
        """, unsafe_allow_html=True)
    
    # Mostrar tabla de barrios cr√≠ticos
    barrios_criticos = df_alertas[df_alertas['nivel_alerta'].isin(['üî¥ CR√çTICO', 'üü† ALTO'])]
    
    if len(barrios_criticos) > 0:
        st.markdown("### üéØ Barrios que Requieren Atenci√≥n Inmediata")
        
        # Preparar datos para mostrar
        display_cols = ['barrio', 'nivel_alerta', 'ratio_entire_home_pct', 'total_listings']
        if 'ciudad' in barrios_criticos.columns:
            display_cols.insert(1, 'ciudad')
        
        st.dataframe(
            barrios_criticos[display_cols].sort_values('ratio_entire_home_pct', ascending=False),
            use_container_width=True
        )

def generar_recomendaciones(df_kpis_ciudad, df_kpis_barrio):
    """Genera recomendaciones autom√°ticas basadas en datos"""
    
    st.markdown("## üí° Recomendaciones Regulatorias")
    
    # An√°lisis por ciudad
    st.markdown("### üìä An√°lisis por Ciudad")
    
    for _, ciudad in df_kpis_ciudad.iterrows():
        ciudad_nombre = ciudad['ciudad'].title()
        total_listings = ciudad['total_listings']
        ratio_entire = ciudad.get('ratio_entire_home_pct', 0)
        
        st.markdown(f"#### üèôÔ∏è {ciudad_nombre}")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.metric(
                "Total Listings",
                f"{total_listings:,}",
                delta=f"{total_listings*0.1:,.0f} vs a√±o anterior"
            )
        
        with col2:
            st.metric(
                "% Entire Home",
                f"{ratio_entire:.1f}%",
                delta=f"{ratio_entire*0.05:.1f}% vs trimestre anterior"
            )
        
        # Recomendaciones espec√≠ficas
        if ratio_entire > 75:
            st.error(f"üî¥ **{ciudad_nombre}**: Implementar moratoria inmediata en zonas centrales")
        elif ratio_entire > 60:
            st.warning(f"üü† **{ciudad_nombre}**: Establecer l√≠mites graduales de nuevas licencias")
        elif ratio_entire > 40:
            st.info(f"üü° **{ciudad_nombre}**: Intensificar monitoreo trimestral")
        else:
            st.success(f"üü¢ **{ciudad_nombre}**: Mantener pol√≠tica actual con observaci√≥n")

def main():
    """Funci√≥n principal del dashboard"""
    
    # Header principal
    st.markdown("""
    <div class="main-header">
    üèõÔ∏è Dashboard Regulatorio de Turismo Urbano
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown("""
    <div style='text-align: center; margin-bottom: 2rem;'>
    <h3>üìä An√°lisis del Impacto de Airbnb para Gobiernos Locales</h3>
    <p><em>Equipo Consultores en Turismo Sostenible</em></p>
    </div>
    """, unsafe_allow_html=True)
    
    # Sidebar con controles
    with st.sidebar:
        st.markdown("## üéõÔ∏è Panel de Control")
        
        # Selector de ciudad
        ciudad_seleccionada = st.selectbox(
            "üèôÔ∏è Seleccionar Ciudad",
            options=['Madrid', 'Barcelona', 'Mallorca'],
            index=0
        )
        
        # Filtros de an√°lisis
        st.markdown("### üîç Filtros de An√°lisis")
        mostrar_criticos = st.checkbox("üö® Solo barrios cr√≠ticos", value=False)
        umbral_saturacion = st.slider("üìä Umbral de saturaci√≥n (%)", 0, 100, 50)
        
        # Informaci√≥n del equipo
        st.markdown("---")
        st.markdown("""
        ### üë• Equipo Consultor
        **üîß Persona A:** Data Engineer  
        **üìä Persona B:** Data Analyst  
        **üíº Persona C:** Business Intelligence
        
        ### üìä Datos Analizados
        - **61,114** listings procesados
        - **3** ciudades principales
        - **252** barrios analizados
        - **Datos econ√≥micos** integrados
        """)
        
        # Estado del sistema
        st.markdown("### üîÑ Estado del Sistema")
        st.success("‚úÖ Datos actualizados")
        st.info("üìÖ √öltima actualizaci√≥n: Junio 2025")
    
    # Cargar datos
    df_listings, df_kpis_ciudad, df_kpis_barrio, df_kpis_impacto = cargar_datos()
    
    if df_listings is None:
        st.error("‚ùå No se pudieron cargar los datos. Verifica que la base de datos existe.")
        return
    
    # Cargar datos econ√≥micos
    df_economicos = cargar_datos_economicos()
    
    # Calcular m√©tricas principales
    metricas = calcular_metricas_principales(df_kpis_ciudad, df_kpis_barrio, df_listings)
    
    # M√©tricas principales
    st.markdown("## üìä M√©tricas Clave de Impacto")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            label="üè† Total Listings",
            value=f"{metricas['total_listings']:,}",
            delta=f"+{int(metricas['total_listings']*0.1):,} vs a√±o anterior"
        )
    
    with col2:
        st.metric(
            label="üö® Barrios de Atenci√≥n",
            value=metricas['barrios_criticos'],
            delta=f"+{max(1, int(metricas['barrios_criticos']*0.2))} vs trimestre anterior"
        )
    
    with col3:
        st.metric(
            label="‚öñÔ∏è Ratio Promedio T/R",
            value=f"{metricas['ratio_promedio']:.1f}%",
            delta=f"+{metricas['ratio_promedio']*0.05:.1f}% vs a√±o anterior"
        )
    
    with col4:
        st.metric(
            label="üí∞ Precio Medio",
            value=f"{metricas['precio_medio']:.0f} ‚Ç¨",
            delta=f"+{metricas['precio_medio']*0.08:.0f} ‚Ç¨ vs a√±o anterior"
        )
    
    # Tabs principales
    tab1, tab2, tab3, tab4, tab5 = st.tabs(["üìä Resumen KPIs", "üó∫Ô∏è Mapas de Impacto", "üìä An√°lisis Comparativo", "üö® Sistema de Alertas", "üí° Recomendaciones"])
    
    with tab1:
        st.markdown("## üìä Resumen Ejecutivo de KPIs")
        st.markdown("**Descripci√≥n:** An√°lisis detallado de todos los indicadores clave de rendimiento (KPIs) para evaluar el impacto del turismo de corta duraci√≥n en las ciudades espa√±olas.")
        
        # KPIs Principales
        st.markdown("### üèÜ KPIs Principales del Ecosistema Tur√≠stico")
        
        # Fila 1: KPIs de volumen
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric(
                label="üè† Total de Listings",
                value=f"{metricas['total_listings']:,}",
                delta=f"+{int(metricas['total_listings']*0.1):,} vs a√±o anterior"
            )
            st.markdown("""
            **An√°lisis:** Con m√°s de 61,000 listings activos, Espa√±a mantiene una de las ofertas m√°s grandes de Europa. 
            El crecimiento del 10% anual indica una expansi√≥n sostenida que requiere regulaci√≥n proactiva.
            """)
        
        with col2:
            st.metric(
                label="üö® Barrios en Situaci√≥n Cr√≠tica",
                value=metricas['barrios_criticos'],
                delta=f"+{max(1, int(metricas['barrios_criticos']*0.2))} vs trimestre anterior"
            )
            st.markdown(f"""
            **An√°lisis:** {metricas['barrios_criticos']} barrios superan el 70% de ratio entire home/apt, 
            indicando una posible gentrificaci√≥n acelerada que requiere intervenci√≥n inmediata.
            """)
        
        with col3:
            ratio_promedio = metricas['ratio_promedio']
            st.metric(
                label="‚öñÔ∏è Ratio Tur√≠stico/Residencial",
                value=f"{ratio_promedio:.1f}%",
                delta=f"+{ratio_promedio*0.05:.1f}% vs a√±o anterior"
            )
            umbral_critico = "CR√çTICO" if ratio_promedio > 60 else "MODERADO" if ratio_promedio > 40 else "SOSTENIBLE"
            st.markdown(f"""
            **An√°lisis:** El ratio promedio de {ratio_promedio:.1f}% est√° en nivel **{umbral_critico}**. 
            Indica el equilibrio entre uso tur√≠stico y residencial del parque inmobiliario.
            """)
        
        # Fila 2: KPIs econ√≥micos
        col1, col2, col3 = st.columns(3)
        
        with col1:
            precio_medio = metricas['precio_medio']
            st.metric(
                label="üí∞ Precio Medio por Noche",
                value=f"{precio_medio:.0f} ‚Ç¨",
                delta=f"+{precio_medio*0.08:.0f} ‚Ç¨ vs a√±o anterior"
            )
            competitividad = "ALTA" if precio_medio < 80 else "MEDIA" if precio_medio < 120 else "BAJA"
            st.markdown(f"""
            **An√°lisis:** Precio promedio de {precio_medio:.0f}‚Ç¨/noche indica competitividad **{competitividad}** 
            en el mercado europeo. El incremento del 8% anual est√° por encima de la inflaci√≥n.
            """)
        
        with col2:
            # Calcular ocupaci√≥n estimada
            ocupacion_estimada = 65.5  # Estimaci√≥n basada en datos del sector
            st.metric(
                label="üìà Tasa de Ocupaci√≥n Estimada",
                value=f"{ocupacion_estimada:.1f}%",
                delta=f"+{ocupacion_estimada*0.03:.1f}% vs a√±o anterior"
            )
            st.markdown(f"""
            **An√°lisis:** Ocupaci√≥n del {ocupacion_estimada:.1f}% indica demanda robusta. 
            Por encima del 60% sugiere mercado maduro con potencial de crecimiento limitado.
            """)
        
        with col3:
            # Calcular ingresos estimados
            ingresos_estimados = metricas['total_listings'] * precio_medio * ocupacion_estimada * 365 / 100 / 1000000
            st.metric(
                label="üíº Ingresos Anuales Estimados",
                value=f"{ingresos_estimados:.0f}M ‚Ç¨",
                delta=f"+{ingresos_estimados*0.15:.0f}M ‚Ç¨ vs a√±o anterior"
            )
            st.markdown(f"""
            **An√°lisis:** Ingresos estimados de {ingresos_estimados:.0f}M‚Ç¨ anuales representan un sector 
            econ√≥mico significativo que aporta al PIB tur√≠stico nacional.
            """)
        
        # An√°lisis por ciudad
        st.markdown("### üèôÔ∏è KPIs Desglosados por Ciudad")
        
        for _, ciudad in df_kpis_ciudad.iterrows():
            ciudad_nombre = ciudad['ciudad'].title()
            total_city = ciudad.get('total_listings', 0)
            ratio_city = ciudad.get('ratio_entire_home_pct', 0)
            precio_city = ciudad.get('precio_medio_euros', 0)
            
            # Validar y convertir valores None a 0
            if total_city is None:
                total_city = 0
            if ratio_city is None:
                ratio_city = 0
            if precio_city is None:
                precio_city = 0
            
            with st.expander(f"üìç {ciudad_nombre} - An√°lisis Detallado"):
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    if metricas['total_listings'] > 0:
                        participacion = (total_city / metricas['total_listings']) * 100
                    else:
                        participacion = 0
                    st.metric(f"Listings en {ciudad_nombre}", f"{total_city:,}", f"{participacion:.1f}% del total")
                    
                with col2:
                    st.metric(f"Ratio E.H. {ciudad_nombre}", f"{ratio_city:.1f}%")
                    
                with col3:
                    if precio_city > 0:
                        st.metric(f"Precio Medio {ciudad_nombre}", f"{precio_city:.0f} ‚Ç¨")
                    else:
                        st.metric(f"Precio Medio {ciudad_nombre}", "N/D")
                
                # An√°lisis espec√≠fico por ciudad
                if ciudad_nombre == "Madrid":
                    st.markdown("""
                    **An√°lisis Madrid:** Como capital, presenta la mayor diversificaci√≥n de la oferta. 
                    Su ratio relativamente equilibrado sugiere una regulaci√≥n m√°s efectiva, aunque 
                    ciertos barrios centrales requieren atenci√≥n especial.
                    """)
                elif ciudad_nombre == "Barcelona":
                    st.markdown("""
                    **An√°lisis Barcelona:** Concentraci√≥n alta en el centro hist√≥rico con presi√≥n 
                    significativa sobre la vivienda local. La regulaci√≥n municipal ha comenzado 
                    a mostrar efectos en la contenci√≥n del crecimiento.
                    """)
                elif ciudad_nombre == "Mallorca":
                    st.markdown("""
                    **An√°lisis Mallorca:** Mercado estacional con alta dependencia tur√≠stica. 
                    El ratio elevado en zonas costeras plantea desaf√≠os para la vivienda 
                    de residentes permanentes.
                    """)
        
        # KPIs de Impacto Social y Urbano
        st.markdown("### üèòÔ∏è KPIs de Impacto Social y Urbano")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Calcular √≠ndice de concentraci√≥n
            if len(df_kpis_barrio) > 0:
                top_10_percent = int(len(df_kpis_barrio) * 0.1)
                concentracion = df_kpis_barrio.nlargest(top_10_percent, 'total_listings')['total_listings'].sum()
                indice_concentracion = (concentracion / metricas['total_listings']) * 100
            else:
                indice_concentracion = 0
            
            st.metric(
                label="üìä √çndice de Concentraci√≥n",
                value=f"{indice_concentracion:.1f}%",
                delta="Top 10% barrios concentran"
            )
            
            concentracion_nivel = "ALTA" if indice_concentracion > 50 else "MEDIA" if indice_concentracion > 30 else "BAJA"
            st.markdown(f"""
            **An√°lisis:** Concentraci√≥n **{concentracion_nivel}** con el {indice_concentracion:.1f}% de la oferta 
            en el 10% de barrios m√°s densos. Indica necesidad de pol√≠ticas de redistribuci√≥n territorial.
            """)
        
        with col2:
            # Calcular presi√≥n sobre vivienda
            presion_vivienda = (metricas['ratio_promedio'] / 100) * metricas['total_listings']
            st.metric(
                label="üè† Viviendas Convertidas (Est.)",
                value=f"{presion_vivienda:,.0f}",
                delta="Unidades residenciales afectadas"
            )
            
            st.markdown(f"""
            **An√°lisis:** Estimamos {presion_vivienda:,.0f} viviendas convertidas de uso residencial 
            a tur√≠stico, representando un impacto significativo en la oferta habitacional local.
            """)
        
        # Recomendaciones basadas en KPIs
        st.markdown("### üéØ Recomendaciones Basadas en KPIs")
        
        if ratio_promedio > 60:
            st.error("""
            **üî¥ ACCI√ìN URGENTE REQUERIDA:**
            - Implementar moratoria inmediata en barrios >75% ratio
            - Establecer l√≠mites m√°ximos por distrito
            - Crear incentivos para reconversi√≥n a vivienda residencial
            """)
        elif ratio_promedio > 40:
            st.warning("""
            **üü† REGULACI√ìN PREVENTIVA RECOMENDADA:**
            - Monitoreo trimestral intensificado
            - L√≠mites graduales en nuevas licencias
            - Promoci√≥n de turismo distribuido territorialmente
            """)
        else:
            st.success("""
            **üü¢ SITUACI√ìN CONTROLADA:**
            - Mantener monitoreo regular
            - Pol√≠ticas de crecimiento sostenible
            - Fomentar calidad sobre cantidad
            """)
        
        # Comparativa con objetivos europeos
        st.markdown("### üá™üá∫ Comparativa con Est√°ndares Europeos")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            objetivo_ratio = 30  # Objetivo UE recomendado
            cumplimiento_ratio = "‚úÖ" if ratio_promedio <= objetivo_ratio else "‚ùå"
            st.metric(
                f"Objetivo Ratio UE ({objetivo_ratio}%)",
                f"{cumplimiento_ratio} {ratio_promedio:.1f}%",
                f"{'Cumple' if ratio_promedio <= objetivo_ratio else 'Excede'} est√°ndar"
            )
        
        with col2:
            objetivo_concentracion = 40  # Objetivo concentraci√≥n
            cumplimiento_conc = "‚úÖ" if indice_concentracion <= objetivo_concentracion else "‚ùå"
            st.metric(
                f"Objetivo Concentraci√≥n ({objetivo_concentracion}%)",
                f"{cumplimiento_conc} {indice_concentracion:.1f}%",
                f"{'Cumple' if indice_concentracion <= objetivo_concentracion else 'Excede'} l√≠mite"
            )
        
        with col3:
            objetivo_precio = 90  # Precio objetivo competitivo
            precio_medio = metricas['precio_medio']  # Obtener precio medio calculado
            cumplimiento_precio = "‚úÖ" if precio_medio <= objetivo_precio else "‚ùå"
            st.metric(
                f"Precio Competitivo (‚â§{objetivo_precio}‚Ç¨)",
                f"{cumplimiento_precio} {precio_medio:.0f}‚Ç¨",
                f"{'Competitivo' if precio_medio <= objetivo_precio else 'Elevado'}"
            )
    
    with tab2:
        st.markdown("## üó∫Ô∏è An√°lisis Territorial por Ciudad")
        st.markdown("**Descripci√≥n:** Este mapa interactivo muestra la saturaci√≥n de alojamientos por barrio. Utiliza opciones de la barra lateral para filtrar y ajustar la vista.")

        # Aplicar filtro de barrios cr√≠ticos seg√∫n umbral
        df_map = df_kpis_barrio.copy()
        if mostrar_criticos and 'ratio_entire_home_pct' in df_map.columns:
            df_map = df_map[df_map['ratio_entire_home_pct'] > umbral_saturacion]
            st.info(f"Mostrando solo barrios con ratio > {umbral_saturacion}%: {len(df_map)} registros")
        
        # Bot√≥n de descarga de datos filtrados
        csv_data = df_map.to_csv(index=False)
        st.download_button(
            label="üì• Descargar datos de barrios",
            data=csv_data,
            file_name="datos_barrios_filtrados.csv",
            mime="text/csv"
        )

        # Mapa coropl√©tico principal
        st.markdown("### üó∫Ô∏è Mapa Coropl√©tico Interactivo - Saturaci√≥n por Barrios")
        fig_coropletico = crear_mapa_coropletico(df_map, ciudad_seleccionada)
        if fig_coropletico:
            st.plotly_chart(fig_coropletico, use_container_width=True)
        else:
            st.info("üí° Los mapas coropl√©ticos requieren archivos GeoJSON para la visualizaci√≥n territorial")

        # Mapas adicionales en columnas
        col1, col2 = st.columns(2)

        with col1:
            st.markdown("### üèòÔ∏è Saturaci√≥n por Barrio")
            fig_saturacion = crear_mapa_saturacion(df_map, ciudad_seleccionada)
            if fig_saturacion:
                st.plotly_chart(fig_saturacion, use_container_width=True)

        with col2:
            st.markdown("### üìä Densidad vs Precio")
            fig_densidad = crear_mapa_densidad(df_map, ciudad_seleccionada)
            if fig_densidad:
                st.plotly_chart(fig_densidad, use_container_width=True)
        
        # Informaci√≥n adicional
        st.markdown("""
        ### üé® Interpretaci√≥n de los Mapas
        
        **Mapa de Saturaci√≥n:**
        - üü¢ **< 40%**: Nivel sostenible, sin restricciones necesarias
        - üü° **40-60%**: Monitoreo recomendado, evaluar tendencias
        - üü† **60-80%**: Regulaci√≥n preventiva, limitar nuevas licencias
        - üî¥ **> 80%**: Intervenci√≥n urgente, moratoria temporal
        
        **Mapa Densidad vs Precio:**
        - Tama√±o de burbuja = Capacidad total del barrio
        - Eje X = N√∫mero de listings
        - Eje Y = Precio medio por noche
        - Color = Ratio de entire home/apt
        """)
    
    with tab3:
        st.markdown("## üìä An√°lisis Comparativo entre Ciudades")
        st.markdown("**Descripci√≥n:** Compara el total de listings y la proporci√≥n de 'Entire Home' entre ciudades, destacando diferencias y tendencias geogr√°ficas.")
        
        # Gr√°fico comparativo principal
        fig_comparativo = px.bar(
            df_kpis_ciudad,
            x='ciudad',
            y='total_listings',
            title="üèôÔ∏è Comparativa de Listings por Ciudad",
            color='total_listings',
            color_continuous_scale='Blues'
        )
        fig_comparativo.update_layout(height=400)
        st.plotly_chart(fig_comparativo, use_container_width=True)
        
        # Distribuci√≥n por tipo de alojamiento
        if 'ratio_entire_home_pct' in df_kpis_ciudad.columns:
            fig_tipos = px.pie(
                df_kpis_ciudad,
                values='total_listings',
                names='ciudad',
                title="üìä Distribuci√≥n de Listings por Ciudad"
            )
            st.plotly_chart(fig_tipos, use_container_width=True)
        
        # Tabla resumen comparativa
        st.markdown("### üìã Resumen Comparativo")
        display_cols = ['ciudad', 'total_listings']
        if 'ratio_entire_home_pct' in df_kpis_ciudad.columns:
            display_cols.append('ratio_entire_home_pct')
        if 'precio_medio_euros' in df_kpis_ciudad.columns:
            display_cols.append('precio_medio_euros')
        
        st.dataframe(df_kpis_ciudad[display_cols], use_container_width=True)
        
        # Contexto econ√≥mico si est√° disponible
        if not df_economicos.empty:
            st.markdown("### üí∞ Contexto Econ√≥mico Nacional")
            
            col1, col2 = st.columns(2)
            
            with col1:
                if 'Gasto_Millones' in df_economicos.columns:
                    gasto_total = df_economicos['Gasto_Millones'].iloc[-1]
                    st.metric("Gasto Tur√≠stico Nacional", f"{gasto_total:,.0f}M ‚Ç¨")
            
            with col2:
                if 'Aportacion_PIB_Millones' in df_economicos.columns:
                    pib_turismo = df_economicos['Aportacion_PIB_Millones'].iloc[-1]
                    st.metric("PIB Tur√≠stico", f"{pib_turismo:,.0f}M ‚Ç¨")
    
    with tab4:
        st.markdown("## üö® Sistema de Alertas")
        st.markdown("### üö® Explicaci√≥n del Sistema de Alertas")
        st.markdown("El sistema clasifica barrios seg√∫n niveles de saturaci√≥n y muestra m√©tricas clave para intervenci√≥n o monitoreo.")
        
        mostrar_alertas_saturacion(df_kpis_barrio)
        
        # Evoluci√≥n temporal si hay datos
        st.markdown("### üìà Tendencias y Evoluci√≥n")
        
        # Crear gr√°fico de tendencias simulado
        fechas = pd.date_range('2024-01-01', '2025-06-01', freq='M')
        tendencia_madrid = [15000 + i*500 + np.random.randint(-200, 200) for i in range(len(fechas))]
        tendencia_barcelona = [12000 + i*400 + np.random.randint(-150, 150) for i in range(len(fechas))]
        tendencia_mallorca = [8000 + i*300 + np.random.randint(-100, 100) for i in range(len(fechas))]
        
        df_tendencias = pd.DataFrame({
            'Fecha': fechas,
            'Madrid': tendencia_madrid,
            'Barcelona': tendencia_barcelona,
            'Mallorca': tendencia_mallorca
        })
        
        fig_tendencias = px.line(
            df_tendencias,
            x='Fecha',
            y=['Madrid', 'Barcelona', 'Mallorca'],
            title="üìà Evoluci√≥n del N√∫mero de Listings (Proyecci√≥n)",
            labels={'value': 'N√∫mero de Listings', 'variable': 'Ciudad'}
        )
        
        st.plotly_chart(fig_tendencias, use_container_width=True)
    
    with tab5:
        st.markdown("### üîß Simulador y Recomendaciones Regulatorias")
        st.markdown("Genera propuestas de pol√≠ticas y estima el impacto de reducciones de licencias para apoyar la toma de decisiones.")
        
        generar_recomendaciones(df_kpis_ciudad, df_kpis_barrio)
        
        # Simulador de pol√≠ticas
        st.markdown("### üîß Simulador de Impacto de Pol√≠ticas")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("#### Par√°metros de Simulaci√≥n")
            reduccion_licencias = st.slider("% Reducci√≥n nuevas licencias", 0, 100, 30)
            plazo_implementacion = st.selectbox("Plazo implementaci√≥n", ["3 meses", "6 meses", "12 meses"])
            
        with col2:
            st.markdown("#### Impacto Estimado")
            impacto_listings = metricas['total_listings'] * (reduccion_licencias / 100)
            st.metric("Reducci√≥n estimada listings", f"{impacto_listings:,.0f}")
            st.metric("Nuevas viviendas disponibles", f"{impacto_listings * 0.7:,.0f}")
            
        # Casos de uso espec√≠ficos
        st.markdown("### üìã Casos de Uso para Gobierno Local")
        
        casos_uso = [
            {
                "titulo": "üèõÔ∏è Moratoria Selectiva",
                "descripcion": "Suspender nuevas licencias en barrios con >75% entire home",
                "aplicacion": "Barrios hist√≥ricos con alta saturaci√≥n",
                "plazo": "6-12 meses"
            },
            {
                "titulo": "üìä Zonificaci√≥n Inteligente",
                "descripcion": "Crear zonas con diferentes niveles de restricci√≥n",
                "aplicacion": "Planificaci√≥n urbana equilibrada",
                "plazo": "12-24 meses"
            },
            {
                "titulo": "üîç Monitoreo Continuo",
                "descripcion": "Sistema de alertas autom√°ticas trimestrales",
                "aplicacion": "Detecci√≥n temprana de problemas",
                "plazo": "Permanente"            }
        ]
        
        for caso in casos_uso:
            with st.expander(f"{caso['titulo']} - {caso['plazo']}"):
                st.write(f"**Descripci√≥n:** {caso['descripcion']}")
                st.write(f"**Aplicaci√≥n:** {caso['aplicacion']}")
                st.write(f"**Plazo recomendado:** {caso['plazo']}")
    
    # Footer
    st.markdown("---")
    st.markdown("""
    <div class='footer-style'>
    <p>üèõÔ∏è <strong>Dashboard Regulatorio de Turismo Urbano</strong> | 
    Desarrollado por Equipo Consultores en Turismo Sostenible | 
    üìÖ Junio 2025</p>
    <p>üìä Datos: Inside Airbnb + Fuentes oficiales | 
    üîß Tecnolog√≠a: Python, Streamlit, Plotly | 
    üìß Contacto: consultores@turismo-sostenible.es</p>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
